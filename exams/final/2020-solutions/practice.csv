Part 2.1: Implementing the StudentDatabaseAdapter,,,,,,,,,,Part 2.2: Implementing the AppController,,,,,,,,,,,,,,,Part 2.3: Implementing the RetryDatabase,,,,,,,,,,Part 2.4: Implementing the CachedDatabase,,,,,,,,,,,,
"`constructor` should throw an IllegalArgumentException or a NullPointerException if passed a null argument","`get` should return null if the student is not in the database","`get` should throw a DatabaseException if the database content is invalid","`get` should throw an IllegalArgumentException or a NullPointerException if passed a null argument","`put` and `get` should serialize and deserialize a student correctly","`put` should throw an IllegalArgumentException or a NullPointerException if passed a null argument","`put` should use the student SCIPER as database key","`remove` should call the database with the correct argument","`remove` should throw an IllegalArgumentException or a NullPointerException if passed a null argument","`remove` should throw a DatabaseException if the key is not present in the database","`constructor` should throw an IllegalArgumentException or a NullPointerException if the first argument is null","`constructor` should throw an IllegalArgumentException or a NullPointerException if the second argument is null","`handleRequest` should put the correct student in the database","`handleRequest` should remove the correct student from the database","`handleRequest` should return the correct error message if a database exception occurs in the get command","`handleRequest` should return the correct error message if the command is invalid","`handleRequest` should return the correct error message if the get command does not have the correct number of arguments","`handleRequest` should return the correct error message if the put command does not have the correct number of arguments","`handleRequest` should return the correct error message if the remove command does not have the correct number of arguments","`handleRequest` should return the correct error message if the put operation fails","`handleRequest` should return the correct error message if the remove operation fails","`handleRequest` should return the correct message when displaying a get result","`handleRequest` should return the correct success message if the put operation succeeds","`handleRequest` should return the correct success message if the remove operation succeeds","`handleRequest` should throw an IllegalArgumentException of a NullPointerException if the argument is null","`constructor` should throw an IllegalArgumentException or a NullPointerException if the argument is null","`get` should return a value if the underlying database fails less or equals than 10 times","`get` should fail with a DatabaseException if the underlying database fails more than 10 times","`get` should fail with an IllegalArgumentException or a NullPointerException if the argument is null","`put` should call the underlying database with the correct data","`put` should throw an IllegalArgumentException or a NullPointerException if the first argument is null","`put` should throw an IllegalArgumentException or a NullPointerException if the second argument is null","`remove` should call the underlying database with the correct data","`remove` should throw an IllegalArgumentException or a NullPointerException if the argument is null","`remove` should throw a DatabaseException if the key is not present in the database","`constructor` should throw an IllegalArgumentException or a NullPointerException if the argument is null","`get` should return the data from the underlying database","`get` should return from the cache with two consecutive calls","`get` should throw an IllegalArgumentException or a NullPointerException if the argument is null","`put` should call the underlying database","`put` should invalidate the cache if the key is present and the value is different","`put` should not invalidate the cache if the key is present and the value is the same","`put` should throw an IllegalArgumentException or a NullPointerException if the first argument is null","`put` should throw an IllegalArgumentException or a NullPointerException if the second argument is null","`remove` should call the underlying database","`remove` should invalidate the cache","`remove` should throw an IllegalArgumentException or a NullPointerException if the argument is null","`remove` should throw a DatabaseException if the key is not present in the database"
OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK,OK